"""
Django settings for safifarm project.

Generated by 'django-admin startproject' using Django 4.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration
from dotenv import load_dotenv
load_dotenv()

sentry_sdk.init(
    dsn=os.environ.get("SENTRY_DSN"),
    integrations=[DjangoIntegration()],
    traces_sample_rate=1.0,
    send_default_pii=True,
    environment=os.environ.get("ENVIRONMENT", "development"),
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-lk(27)3%w%14kqc4qsxrxw5w@kqlxj5l*t)4ib8t83l)&u0_@-')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# Security Settings
if DEBUG:
    SECURE_SSL_REDIRECT = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    SECURE_BROWSER_XSS_FILTER = False
    SECURE_CONTENT_TYPE_NOSNIFF = False
    X_FRAME_OPTIONS = 'SAMEORIGIN'
    ALLOWED_HOSTS = ['*']
    CORS_ORIGIN_ALLOW_ALL = True
    SECURE_SSL_REDIRECT = False
    SECURE_PROXY_SSL_HEADER = None
else:
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "django_filters",  
    "ml.apps.MLConfig",  
    "api",
    "marketplace.apps.MarketplaceConfig",  
    "payment_processing",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "safifarm.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "safifarm.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('DB_NAME', 'safifarm'),
        'USER': os.environ.get('DB_USER', 'postgres'),
        'PASSWORD': os.environ.get('DB_PASSWORD', ''),
        'HOST': os.environ.get('DB_HOST', 'localhost'),
        'PORT': os.environ.get('DB_PORT', '5432'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# ML model directories
CROP_IMAGES_DIR = os.path.join(MEDIA_ROOT, 'crop_images')
ML_MODELS_DIR = os.path.join(BASE_DIR, 'ml', 'models')

# ML Settings
ML_SETTINGS = {
    'MODEL_STORAGE': {
        'LOCAL_PATH': ML_MODELS_DIR,
        'S3_PATH': 'models/',
    },
    'MAX_IMAGE_SIZE': 10 * 1024 * 1024,  # 10MB
    'SUPPORTED_FORMATS': ['.jpg', '.jpeg', '.png'],
}

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom user model
AUTH_USER_MODEL = 'api.User'

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
}

# JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only in development
CORS_ALLOWED_ORIGINS = [
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Mobile Money API settings (to be configured)
MOBILE_MONEY = {
    'MTN': {
        'API_KEY': '',
        'API_SECRET': '',
        'ENVIRONMENT': 'sandbox',
    },
    'AIRTEL': {
        'API_KEY': '',
        'API_SECRET': '',
        'ENVIRONMENT': 'sandbox',
    }
}

# Twilio settings
TWILIO_ACCOUNT_SID = os.getenv('TWILIO_ACCOUNT_SID', '')
TWILIO_API_KEY = os.getenv('TWILIO_API_KEY', '')
TWILIO_API_SECRET = os.getenv('TWILIO_API_SECRET', '')

# Payment Settings
PAYMENT_SETTINGS = {
    'SUPPORTED_PROVIDERS': ['mtn', 'airtel'],
    'TRANSACTION_TIMEOUT': 300,  # 5 minutes
    'MAX_RETRIES': 3,
}

# AWS Settings
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', '')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', '')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME', '')
AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME', 'us-east-1')
AWS_S3_SIGNATURE_VERSION = 's3v4'
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None
AWS_S3_VERIFY = True

# MTN Mobile Money Settings
MTN_API_KEY = os.environ.get('MTN_API_KEY')
MTN_API_USER = os.environ.get('MTN_API_USER')
MTN_API_PASSWORD = os.environ.get('MTN_API_PASSWORD')
MTN_ENVIRONMENT = os.environ.get('MTN_ENVIRONMENT', 'sandbox')

# Airtel Money Settings
AIRTEL_CLIENT_ID = os.environ.get('AIRTEL_CLIENT_ID')
AIRTEL_CLIENT_SECRET = os.environ.get('AIRTEL_CLIENT_SECRET')
AIRTEL_ENVIRONMENT = os.environ.get('AIRTEL_ENVIRONMENT', 'sandbox')

# Payment Provider Settings
PAYMENT_PROVIDERS = {
    'MTN': {
        'API_KEY': os.getenv('MTN_API_KEY', ''),
        'API_SECRET': os.getenv('MTN_API_SECRET', ''),
        'API_BASE_URL': os.getenv('MTN_API_BASE_URL', 'https://sandbox.momodeveloper.mtn.com/collection/v1_0'),
        'ENVIRONMENT': os.getenv('MTN_ENVIRONMENT', 'sandbox'),
        'CALLBACK_URL': os.getenv('MTN_CALLBACK_URL', 'https://api.safifarm.com/api/payments/webhook/mtn/'),
        'SUBSCRIPTION_KEY': os.getenv('MTN_SUBSCRIPTION_KEY', '')
    },
    'AIRTEL': {
        'API_KEY': os.getenv('AIRTEL_API_KEY', ''),
        'API_SECRET': os.getenv('AIRTEL_API_SECRET', ''),
        'API_BASE_URL': os.getenv('AIRTEL_API_BASE_URL', 'https://openapiuat.airtel.africa/merchant/v1/payments'),
        'ENVIRONMENT': os.getenv('AIRTEL_ENVIRONMENT', 'sandbox'),
        'CALLBACK_URL': os.getenv('AIRTEL_CALLBACK_URL', 'https://api.safifarm.com/api/payments/webhook/airtel/'),
        'CLIENT_ID': os.getenv('AIRTEL_CLIENT_ID', '')
    }
}

# SMS Settings
SMS_PROVIDER = {
    'NAME': os.getenv('SMS_PROVIDER', 'africastalking'),
    'API_KEY': os.getenv('SMS_API_KEY', ''),
    'SENDER_ID': os.getenv('SMS_SENDER_ID', 'SAFIFARM'),
    'IS_SANDBOX': os.getenv('SMS_IS_SANDBOX', 'True').lower() == 'true'
}

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'api': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.gmail.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = 'SafiFarm <noreply@safifarm.com>'

# Africa's Talking SMS settings
AFRICASTALKING_USERNAME = os.getenv('AFRICASTALKING_USERNAME', '')
AFRICASTALKING_API_KEY = os.getenv('AFRICASTALKING_API_KEY', '')

# Frontend URL for links in notifications
FRONTEND_URL = os.getenv('FRONTEND_URL', 'http://localhost:3000')

# Notification settings
NOTIFICATIONS = {
    'BOOKING_REMINDER_MINUTES': 60,  # Send reminder 60 minutes before booking
    'PAYMENT_EXPIRY_MINUTES': 30,    # Payment expires after 30 minutes
    'ANALYSIS_MAX_MINUTES': 10       # Maximum time for analysis to complete
}

# Celery settings
CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
